# KarstKit Multi-Service Flask Deployment Configuration
# Format: scheme:owner/repo[#ref]
# Supported schemes: gh (GitHub), gl (GitLab)

# PRODUCTION EXAMPLES - Replace with your actual Flask applications
# Requirements for deployable Flask apps:
# ✅ pyproject.toml with [project.scripts] console scripts
# ✅ main.py or app.py with main() function
# ✅ Proper requirements.txt with flask dependency
# ✅ Python package structure

# Production Flask Services (replace with your repositories)
#- gh:your-org/flask-dashboard    # Web dashboard with monitoring endpoints
#- gh:your-org/flask-api         # REST API with CRUD operations
#- gh:your-org/flask-microservice # Lightweight service with gRPC
#- gh:your-org/flask-blog        # CMS with admin interface
#- gh:your-org/flask-chat        # Real-time chat with WebSocket

# ─────────────────────────────────────────────────────────────────
# DEMO CONFIGURATION (for testing deployment pipeline)
# Uncomment to test multi-service deployment functionality
# These will demonstrate the pipeline but fail at entrypoint detection

# Demo repositories for testing (remove # to activate)
- gh:miguelgrinberg/microblog           # Flask tutorial project
- gh:requests/requests-oauthlib#master  # Python package structure
- gh:pallets-eco/flask-wtf#main         # Flask ecosystem integration

# ─────────────────────────────────────────────────────────────────
# USAGE INSTRUCTIONS
#
# For Production:
# 1. Replace gh:your-org/* with your actual Flask repositories
# 2. Ensure each repo has proper Python entrypoints
# 3. Deploy: iac deploy --file repos.yaml --wait
# 4. Monitor: iac health && iac logs
#
# For Testing Pipeline:
# 1. Uncomment demo repositories above
# 2. Run: iac deploy --file repos.yaml
# 3. Observe multi-service processing (will show "No entrypoint detected")
