name: End-to-End Deployment Pipeline Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC to catch deployment regressions
    - cron: '0 2 * * *'

  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      timeout:
        description: 'Test timeout in seconds'
        required: false
        default: '300'
        type: string

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  e2e-deployment-test:
    name: End-to-End Deployment Test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      docker:
        image: docker:24-dind
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better context
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libssl-dev \
            libffi-dev \
            python3-dev \
            curl \
            jq

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            karstkit/venv
            dshbrd/venv
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

      - name: Bootstrap KarstKit environment
        working-directory: karstkit
        run: |
          echo "🔧 Setting up KarstKit environment..."
          make bootstrap
          source venv/bin/activate
          pip list

      - name: Bootstrap dshbrd environment
        working-directory: dshbrd
        run: |
          echo "🔧 Setting up dshbrd environment..."
          if [ ! -d "venv" ]; then
            python -m venv venv
          fi
          source venv/bin/activate
          pip install -r requirements.txt
          pip list

      - name: Verify Docker daemon
        run: |
          docker version
          docker info
          docker network ls

      - name: Pre-deployment health check
        run: |
          echo "🏥 Running pre-deployment health checks..."

          # Check Python environments
          cd karstkit && source venv/bin/activate && python --version
          cd ../dshbrd && source venv/bin/activate && python --version

          # Check required commands are available
          cd ../karstkit
          source venv/bin/activate
          iac --help

          # Verify repos.yaml is valid
          python -c "import yaml; yaml.safe_load(open('repos.yaml'))"

          echo "✅ Pre-deployment checks passed"

      - name: Run End-to-End Deployment Test
        working-directory: karstkit
        env:
          TEST_TIMEOUT: ${{ github.event.inputs.timeout || '300' }}
        run: |
          echo "🚀 Starting End-to-End Deployment Pipeline Test"
          echo "================================================"
          echo "Test timeout: ${TEST_TIMEOUT}s"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "================================================"

          # Make test script executable
          chmod +x tests/test_e2e_deployment_pipeline.py

          # Run the test with timeout
          timeout ${TEST_TIMEOUT} python tests/test_e2e_deployment_pipeline.py || {
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "❌ Test timed out after ${TEST_TIMEOUT} seconds"
              exit 1
            else
              echo "❌ Test failed with exit code $exit_code"
              exit $exit_code
            fi
          }

      - name: Collect deployment logs
        if: always()
        run: |
          echo "📋 Collecting deployment artifacts and logs..."

          # Create artifacts directory
          mkdir -p artifacts/logs
          mkdir -p artifacts/configs

          # Collect Docker logs
          echo "🐳 Collecting Docker container logs..."
          docker ps -a > artifacts/logs/docker-ps.log 2>&1 || true
          docker network ls > artifacts/logs/docker-networks.log 2>&1 || true
          docker images > artifacts/logs/docker-images.log 2>&1 || true

          # Get logs from all containers
          for container in $(docker ps -a --format "{{.Names}}" | grep -E "(iac-|envoy)" || true); do
            echo "Collecting logs for container: $container"
            docker logs "$container" > "artifacts/logs/${container}.log" 2>&1 || true
          done

          # Collect KarstKit configuration
          if [ -f "karstkit/repos.yaml" ]; then
            cp karstkit/repos.yaml artifacts/configs/ || true
          fi

          # Collect environment info
          docker version > artifacts/logs/docker-version.log 2>&1 || true
          uname -a > artifacts/logs/system-info.log 2>&1 || true
          df -h > artifacts/logs/disk-usage.log 2>&1 || true

          echo "📦 Artifacts collected in artifacts/ directory"

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-artifacts-${{ github.run_number }}
          path: artifacts/
          retention-days: 7

      - name: Cleanup resources
        if: always()
        run: |
          echo "🧹 Final cleanup..."

          # Stop and remove all containers
          docker ps -q | xargs -r docker stop || true
          docker ps -aq | xargs -r docker rm || true

          # Remove test images
          docker images --filter "reference=iac-*" -q | xargs -r docker rmi || true

          # Remove test networks
          docker network ls --filter "name=iacnet" -q | xargs -r docker network rm || true

          # Clean up any remaining resources
          docker system prune -f || true

          echo "✅ Cleanup completed"

      - name: Post-test analysis
        if: always()
        run: |
          echo "📊 Post-test analysis..."
          echo "=================================="

          # Check if deployment was successful
          if [ -f "artifacts/logs/docker-ps.log" ]; then
            echo "Final container state:"
            cat artifacts/logs/docker-ps.log
          fi

          echo "=================================="
          echo "Test run completed for:"
          echo "  Branch: ${{ github.ref_name }}"
          echo "  Commit: ${{ github.sha }}"
          echo "  Run ID: ${{ github.run_number }}"
          echo "=================================="

  integration-test-summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: e2e-deployment-test
    if: always()

    steps:
      - name: Test Results Summary
        run: |
          echo "## 🚀 End-to-End Deployment Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.e2e-deployment-test.result }}" == "success" ]; then
            echo "| E2E Deployment Test | ✅ **PASSED** |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **All deployment pipeline tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The deployment pipeline is working correctly and ready for release." >> $GITHUB_STEP_SUMMARY
          else
            echo "| E2E Deployment Test | ❌ **FAILED** |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Deployment pipeline test failed.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the test logs and fix any issues before release." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the test artifacts and logs" >> $GITHUB_STEP_SUMMARY
            echo "2. Fix any deployment or configuration issues" >> $GITHUB_STEP_SUMMARY
            echo "3. Re-run the pipeline" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** End-to-End Deployment Pipeline Test" >> $GITHUB_STEP_SUMMARY
